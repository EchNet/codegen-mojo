<%doc>

	Generates the class org.terrane.codegen.samples.BuilderTemplate.

	Given a prototype bean class, BuilderTemplate generates a builder class
	for the bean type.  The builder class depends on a companion immutable bean
	interface, as generated by 
	of getter methods.  The object built by the builder class is not mutable by any
	means short of reflection.

	BuilderTemplate is invoked as shown:

		new BuilderTemplate().render(
			new FileWriter("ThingBuilder.java"),
			Thing.class,
			"ThingBuilder",
			"ImmutableThing")

</%doc>
<%import>
	java.beans.PropertyDescriptor;
	org.terrane.codegen.typemodel.BeanClassModel;
</%import>
<%args>
	Class<?> prototypeBeanClass;
	String builderName;
	String beanInterfaceName;
</%args>
<%class>
	private static String capitalize(String str)
	{
		return Character.toUpperCase(str.charAt(0)) + str.substring(1);
	}
</%class>
<%java>
	BeanClassModel beanClassModel = new BeanClassModel(prototypeBeanClass);
</%java>
package <% prototypeBeanClass.getPackage().getName() %>;

public class <% builderName %>
{
<%for PropertyDescriptor prop : beanClassModel.getPropertyDescriptors() %>
	private <% prop.getPropertyType().getCanonicalName() %> <% prop.getName() %>;
</%for>
<%for PropertyDescriptor prop : beanClassModel.getPropertyDescriptors() %>

	public <% builderName %> set<% capitalize(prop.getName()) %>(<% prop.getPropertyType().getCanonicalName() %> <% prop.getName() %>)
	{
		this.<% prop.getName() %> = <% prop.getName() %>;
		return this;
	}
</%for>

	public <% beanInterfaceName %> build()
	{
<%for PropertyDescriptor prop : beanClassModel.getPropertyDescriptors() %>
		final <% prop.getPropertyType().getCanonicalName() %> <% prop.getName() %> = this.<% prop.getName() %>;
</%for>
		return new <% beanInterfaceName %>() {
<%for PropertyDescriptor prop : beanClassModel.getPropertyDescriptors() %>

			@Override
			public <% prop.getPropertyType().getCanonicalName() %> get<% capitalize(prop.getName()) %>() {
				return <% prop.getName() %>;
			}
</%for>
		};
	}
}
